{"version":3,"sources":["main.js"],"names":["log","debug","vLog","document","addEventListener","event","tab","target","classList","toString","contains","panelID","getAttribute","panel","getElementById","el","container","parentNode","tabsObj","querySelectorAll","panelsObj","tabs","Array","from","panels","length","map","currentTab","setAttribute","currentPanel","call"],"mappings":"AAUA,cAAA,WAqBA,GAAAA,GAAAC,MAAA,UACAC,EAAAD,MAAA,aAGAE,UAAAC,iBAAA,QAAA,SAAAC,GAGA,GAAAC,GAAAD,EAAAE,MAIA,IAHAL,EAAA,iBAAAI,EAAAE,UAAAC,YAGAH,EAAAE,UAAAE,SAAA,oBAAA,CAEAR,EAAA,+CAGA,IAAAS,GAAAL,EAAAM,aAAA,iBACAC,EAAAV,SAAAW,eAAAH,EAEAT,GAAA,YAAAS,GACAT,EAAA,IAAAS,EAAA,KAAAE,EAAA,MAAA,WAAA,oBAQA,KAJA,GAAAE,GAAAT,EACAU,GAAA,EAGAD,GAAAA,EAAAE,aAAAD,GAGAD,EAAAA,EAAAE,WAEAf,EAAA,8BAAAa,EAAAP,UAAAC,YAGAM,EAAAP,WAAAO,EAAAP,UAAAE,SAAA,iBAEAR,EAAA,8CAGAc,EAAAD,EAQA,IAAAF,GAAAG,EAAA,CAEAd,EAAA,kDAGA,IAAAgB,GAAAF,EAAAG,iBAAA,qBACAC,EAAAJ,EAAAG,iBAAA,uBAGAE,EAAAC,MAAAC,KAAAL,GACAM,EAAAF,MAAAC,KAAAH,EAEAlB,GAAA,SAAAmB,EAAAI,OAAA,aAAAD,EAAAC,OAAA,YAGAJ,EAAAK,IAAA,SAAAC,GACAzB,EAAA,GAAAyB,EAAAf,aAAA,MAAA,gBACAe,EAAAC,aAAA,iBAAA,KAIAJ,EAAAE,IAAA,SAAAG,GACA3B,EAAA,GAAA2B,EAAAjB,aAAA,MAAA,YACAiB,EAAAD,aAAA,eAAA,KAIA5B,EAAA,WAAAM,EAAAM,aAAA,MAAA,aAAAD,EAAA,KAGAL,EAAAsB,aAAA,gBAAA,QACAf,EAAAe,aAAA,cAAA,eAOAE","file":"main.min-141cf8da.js","sourcesContent":["/**\n * # main.js\n *\n * Scripts for the app. We're using some [ES6](http://bit.ly/1HAPes1) features\n * in here, which have to run through a [transpiler](http://bit.ly/1F2iiS8) to\n * ensure they'll work on all but the bleeding-edge of browsers. (See\n * `gulpfile.js` for an idea of how we're handling that automatically here.)\n */\n\n// ES6-style [IIFE](http://bit.ly/1F2mT6T) to keep us scoped properly.\n(() => {\n  'use strict';\n\n  /*\n   * Create some loggers for easy console control.\n   *\n   * For standard logging, open the console and run:\n   *\n   *     debug.enable('sc:log');\n   *\n   * For verbose logging, use:\n   *\n   *     debug.enable('sc:log,sc:verbose');\n   *\n   * or:\n   *\n   *     debug.enable('sc:*');\n   *\n   * For more information, see the\n   * [`debug` README on GitHub](http://git.io/vThJY).\n   */\n  const log = debug('sc:log');\n  const vLog = debug('sc:verbose');\n\n  // ## Add an event listener to handle the code view tab boxes\n  document.addEventListener('click', (event) => {\n\n    // - Create a pointer to the clicked element\n    const tab = event.target;\n    vLog(`event.target: ${tab.classList.toString()}`);\n\n    // ### Ensure the clicked element was a tab\n    if (tab.classList.contains('code-toggle__tab')) {\n\n      vLog('The clicked element was a tab; continuing...');\n\n      // - Get the panel ID from the clicked tab, then select it\n      const panelID = tab.getAttribute('aria-controls');\n      const panel = document.getElementById(panelID);\n\n      vLog(`panelID: ${panelID}`);\n      vLog(`#${panelID} ${!!panel ? 'was' : 'was not'} found in the DOM`);\n\n      // ### Find the container\n      // - Create variables for use in the `while` loop\n      let el = tab;\n      let container = false;\n\n      // - Run a loop until the container is found or no parent node is found\n      while (el && el.parentNode && !container) {\n\n        // - Climb one step up the DOM tree\n        el = el.parentNode;\n\n        vLog(`Parent element class list: ${el.classList.toString()}`);\n\n        // - Check if the current element is the main container\n        if (el.classList && el.classList.contains('code-toggle')) {\n\n          vLog('Found the container element; continuing...');\n\n          // - If so, store it in `container`\n          container = el;\n\n        }\n\n      }\n\n      // ### Change the tab and panel states\n      // - Only continue if a panel and container were found\n      if (panel && container) {\n\n        vLog('A panel and container were found; continuing...');\n\n        // - Select all the tabs and all the panels in separate variables\n        const tabsObj = container.querySelectorAll('.code-toggle__tab');\n        const panelsObj = container.querySelectorAll('.code-toggle__panel');\n\n        // - Convert `tabsObj` & `panelsObj` to arrays from array-like objects\n        const tabs = Array.from(tabsObj);\n        const panels = Array.from(panelsObj);\n\n        vLog(`Found ${tabs.length} tabs and ${panels.length} panels.`);\n\n        // - Deselect all tabs to start\n        tabs.map((currentTab) => {\n          vLog(`${currentTab.getAttribute('id')} deselected.`);\n          currentTab.setAttribute('aria-selected', false);\n        });\n\n        // - Hide all panels next\n        panels.map((currentPanel) => {\n          vLog(`${currentPanel.getAttribute('id')} hidden.`);\n          currentPanel.setAttribute('aria-hidden', true);\n        });\n\n        // - Output a message in the console\n        log(`Clicked ${tab.getAttribute('id')}; showing ${panelID}.`);\n\n        // - Then set the clicked tab and corresponding panel to active\n        tab.setAttribute('aria-selected', 'true');\n        panel.setAttribute('aria-hidden', 'false');\n\n      }\n\n    }\n\n  });\n}).call();\n"],"sourceRoot":"/source/"}